@page "/blogposts"
@inject BlogPostService BlogPostService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudStack Spacing="4" AlignItems="AlignItems.Center">
        @if (posts == null)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="mt-4" />
        }
        else if (!posts.Any())
        {
            <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center" Class="mt-4">No posts available yet. Check back later!</MudText>
        }
        else
        {
            <MudStack Spacing="4" AlignItems="AlignItems.Stretch">
                @foreach (var post in posts)
                {
                    <MudItem xs="12" sm="12" md="12" lg="12">
                        <BlogPostComp Title="@post.Title"
                                      PublishedDate="@post.CreatedAt"
                                      Content="@post.Content" />
                    </MudItem>
                }
            </MudStack>
        }
    </MudStack>
</MudContainer>

@code {
    private List<BlogPostDto> posts = new List<BlogPostDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await BlogPostService.GetAllPostsAsync();

            // Order posts by CreatedAt descending (most recent first)
            posts = posts.OrderByDescending(post => post.CreatedAt).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching blog posts: {ex.Message}");
        }
    }
}