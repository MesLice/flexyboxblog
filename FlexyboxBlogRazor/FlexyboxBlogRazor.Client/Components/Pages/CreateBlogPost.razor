@page "/newblogpost"
@inject BlogPostService BlogPostService
@inject ISnackbar Snackbar
@rendermode InteractiveAuto

<MudSnackbarProvider />

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8 mb-8">
    <MudPaper Elevation="3" Class="p-8">
        <MudStack Spacing="4" Class="p-4">

            <!-- Title Section with Padding -->
            <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Center" Class="mb-4">
                Create New Blog Post
            </MudText>

            <!-- Blog Post Form -->
            <MudForm @ref="form" Model="newPost">
                <!-- Title Input -->
                <MudTextField Label="Title" @bind-Value="newPost.Title" Required="true" Variant="Variant.Outlined" FullWidth="true" Class="mb-4" />

                <!-- Content Input -->
                <MudTextField Label="Content" @bind-Value="newPost.Content" Required="true" Variant="Variant.Outlined" FullWidth="true" Lines="10" Class="mb-4" />

                <!-- Submit Button with Consistent Padding -->
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitForm" Disabled="IsSubmitting" Size="Size.Large" FullWidth="true" Class="p-3">
                    @if (IsSubmitting)
                    {
                        <MudProgressCircular Indeterminate Size="Size.Medium" Color="Color.Inherit" />
                        <span class="ml-2">Submitting...</span>
                    }
                    else
                    {
                        <span>Submit Post</span>
                    }
                </MudButton>
            </MudForm>

        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private AddBlogPostDto newPost = new AddBlogPostDto { Title = string.Empty, Content = string.Empty };
    private bool IsSubmitting = false;

    private MudForm form;

    private async Task SubmitForm()
    {
        await form.Validate();
        if (!form.IsValid)
        {
            Snackbar.Add("Please fill in both the title and content.", Severity.Error);
            return;
        }

        IsSubmitting = true;

        try
        {
            await BlogPostService.CreatePostAsync(newPost);
            Snackbar.Add("Blog post created successfully!", Severity.Success);

            newPost = new AddBlogPostDto { Title = string.Empty, Content = string.Empty };
            form.ResetValidation();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsSubmitting = false;
        }
    }
}